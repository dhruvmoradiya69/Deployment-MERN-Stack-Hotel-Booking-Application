# Define custom log format for debugging
log_format  custom_debug  '$remote_addr - $remote_user [$time_local] '
                          '"$request" $status $body_bytes_sent '
                          '"$http_referer" "$http_user_agent" '
                          'host="$host" forwarded_for="$http_x_forwarded_for" '
                          'real_ip="$http_x_real_ip" '
                          'protocol="$server_protocol"';

proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=image_cache:10m max_size=1g inactive=60m use_temp_path=off;

server {
    listen 80;
    server_name _;  # Changed to wildcard to avoid 400 errors from ELB

    root /usr/share/nginx/html;
    index index.html index.htm;

    # Use the custom log format
    access_log /var/log/nginx/access.log custom_debug;
    error_log /var/log/nginx/error.log;

    # Serve static files with caching
    location ~* \.(png|jpg|jpeg|gif|svg|ico|webp|woff|woff2|ttf|otf|eot)$ {
        expires 6M;
        access_log off;
        add_header Access-Control-Allow-Origin "*";
        proxy_cache image_cache;
        proxy_cache_valid 200 302 1h;
        proxy_cache_valid 404 1m;
        add_header X-Proxy-Cache $upstream_cache_status;
    }

    # JS, CSS, HTML, JSON files with caching
    location ~* \.(js|css|html|json|map)$ {
        expires 6M;
        access_log off;
        add_header Cache-Control "public, max-age=2592000";
        add_header Access-Control-Allow-Origin "*";
    }

    # Preload critical images
    location = /preload.jpg {
        root /usr/share/nginx/html;
        add_header Link "</preload.jpg>; rel=preload; as=image";
    }

    # SPA fallback
    location / {
        try_files $uri $uri/ /index.html;
    }

    # API proxy
    location /api/ {
        proxy_pass http://backend-service:5050/api/;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        add_header Access-Control-Allow-Origin "*";
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "Content-Type, Authorization";
    }

    # Gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript font/woff2;
    gzip_proxied any;
    gzip_min_length 256;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header Referrer-Policy no-referrer-when-downgrade always;

    # Content Security Policy
    add_header Content-Security-Policy "
      default-src 'self';
      script-src 'self' 'unsafe-inline' 'unsafe-eval' https://js.stripe.com https://*.stripe.com;
      style-src 'self' 'unsafe-inline' https://js.stripe.com https://*.stripe.com;
      frame-src https://js.stripe.com https://*.stripe.com;
      img-src 'self' data: https://*.cloudinary.com https://js.stripe.com https://*.stripe.com;
      connect-src 'self' https://api.stripe.com https://js.stripe.com https://*.stripe.com;
      font-src 'self' data:;
      media-src 'none';
      child-src https://js.stripe.com https://*.stripe.com;
      object-src 'none';
    " always;

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
